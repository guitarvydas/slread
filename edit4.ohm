Ohm {
Grammar = DefName Inheritance? "{" Rule+ "}"
Inheritance = "<:" DefName
Rule = DefName FormalParameterList? Description? defineOp RuleBody
Comment = CommentToEOL | MultiLineComment
defineOp = "=" | "+=" | ":="
RuleBody = Expr Tag?
SingleLineComment = "//" CommentToEOL
MultiLineComment = "/*" CommentToEOL+ "*/"
CommentToEOL = #(commentText eol)

FormalParameterList = "<" RefName CommaName ">"
Description = "(" commentText ")"
CommaName = ("," RefName)+

Expr = ItemSequence Alternate?
Alternate = ("|" ItemSequence Tag?)+
Tag = "--" TagName

ItemSequence = Item+
Item = Lexification
Lexification = "#"? Prefixed
Prefixed = Prefix? Suffixed
Prefix = "&" | "~"

Suffixed = Primary Suffix?
Suffix = "*" | "+" | "?"
Primary = TerminalRange | Terminal | NestedExpr | RuleApplication
Terminal = string
TerminalRange = Terminal ".." Terminal
RuleApplication = RefName ActualParameterList?
NestedExpr = "(" Expr ")"

ActualParameterList = "<" Expr CommaExpr? ">"
CommaExpr = ("," Expr)+
TagName = name
RefName = name ~defineOp
DefName = name

string = dq notDQ? dq
dq = "\""
notDQ = (~dq any)+

name = nameFirst nameRest?
nameFirst = letter | "_"
nameRest = (digit | nameFirst)+

commentText = (~nl any)+ eol

eol = (nl | end)
nl = "\n"
}