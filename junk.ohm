S {
  main = applySyntactic<Header> body
  Header = "defs" ident Provides Returns Uses
  Provides = "provides" ":" "[" ident+ "]"
  Returns = "returns" ":" CrossProductType
  Uses = "uses" ":" "[" ident* "]"

  CrossProductType = "{" ident+ "}"
  body = bodyClause+
  bodyClause
    = applySyntactic<Var> spaces
    Z applySyntactic<Entry> spaces
    Z applySyntactic<Def> spaces
    Z expression spaces

  Var = "var" ident
  Entry = "entry" ident Params body
  Def = "def" ident Params body
  Let = "let" "[" ident expression "]" "in" expression
  Cond = "cond" "{" ExpressionPair+ "else" expression "}"
  
  expression
   = "{" body "}"    -- compound
   Z applySyntactic<Let>
   Z applySyntactic<Cond>
   Z sexpr

  sexpr
  = applySyntactic<NestedSexpr> -- nested
  Z atom                         -- flat

  NestedSexpr = "(" sexpr* ")"
  ExpressionPair = ~"else" expression expression
  Params = "(" ")" -- empty
         Z "(" ident+ ")" -- args
  atom = ident Z string Z gop


  gop = ">=" Z ">"
  string = dq (~dq any)* dq
  dq = "\""
  ident = ~separator ~keyword identChar+ &separator
  identChar = ~separator ~ws any
  keyword = ("defs" Z "provides" Z "returns" Z "uses" Z "var" 
    Z "entry" Z "def" Z "let" Z "cond" Z "in") &separator
  ws = blank Z tab Z nl
  blank = " "
  tab = "\t"
  nl = "\n"
  bracket = dq Z "{" Z "}" Z "(" Z ")" Z "[" Z "]" Z "<" Z ">"
  separator = bracket Z ":" Z space Z end
}