main [ Header     body] = [[${Header}\n${body}]]
Header [ kdefs ident Provides Returns Uses] = [[(in-package ${ident})]]
Provides [ kprovides kcolon klbracket @ident krbracket] = [[]]
Returns [ kreturns kcolon CrossProductType] = [[]]
Uses [ kuses kcolon klbracket @ident krbracket] = [[]]
CrossProductType [ klbrace @ident krbrace] = [[ ${klbrace} ${ident} ${krbrace}]]
body [ @bodyClause] = [[ ${bodyClause}]]
bodyClause [x spaces] = [[${x} ]]
Var [ kvar ident] = [[]]
Entry [ kentry ident Params body] = [[\n(defun ${ident} ${Params}\n${body})\n]]
Def [ kdef ident Params body] = [[\n(defun ${ident} ${Params}\n${body})\n]]

Let [ klet klbracket ident expression krbracket kin expression]
  = [[(let ((${ident} ${expression}))\n${expression})]]

Cond [ kcond klbrace @ExpressionPair kelse expression krbrace]
  = [[(cond (\n${ExpressionPair}\n(t ${expression}))]]

expression [x] = [[${x}]]
expression_compound [klbrace body krbrace] = [[\n(progn ${body})\n]]
sexpr_nested [x] = [[${x}]]
sexpr_flat [x] = [[${x}]]
NestedSexpr_chareq [ klpar keq @sexpr krpar] = [[(char= ${sexpr})]]
NestedSexpr_other [ klpar @sexpr krpar] = [[ ${klpar} ${sexpr} ${krpar}]]
ExpressionPair [predicate expression] = [[(${predicate} ${expression})\n]]
Params_empty [klpar krpar] = [[${klpar}${krpar}]]
Params_args [klpar @ident krpar] = [[${klpar}${ident}${krpar}]]

atom [a] = [[${a}]]
gop [k] = [[${k}]]
string_lpar [ dq1 klp dq2] = [[ #\\(]]
string_rpar [ dq1 klp dq2] = [[ #\\)]]
string_other [ dq1 @any dq2] = [[ ${dq1}${any}${dq2}]]
dq [ kdquote] = [[${kdquote}]]
ident [@identChar lookahead] = [[ ${identChar}]]
identChar [any] = [[${any}]]
keyword [ x separator] = [[ ${x}${separator}]]
ws [c] = [[${c}]]
blank [ k ] = [[${k}]]
tab [ktag] = [[${ktag}]]
nl [ knewline] = [[${knewline}]]
bracket [x] = [[${x}]]
separator [x] = [[${x}]]
